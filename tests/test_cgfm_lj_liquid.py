import pytest
from mscg.cli import cgfm



def test_1s(datafile):
    
    coeffs = cgfm.main(
        top     = datafile("unary_lj_fluid.top"),
        traj    = datafile("unary_lj_fluid.lammpstrj,frames=20"),
        cut     = 2.5,
        pair    = ['model=BSpline,type=1:1,min=0.9,max=2.5,resolution=0.1'],
        verbose = 0,
        save    = 'return'
    )
    
    benchmark = [ 1.38918971e+02,  9.18283540e+01,  3.71719269e+01,  8.27409046e+00,
                 -1.20437070e+00, -2.71827266e+00, -2.26838241e+00, -1.59634270e+00,
                 -1.08204297e+00, -7.17223921e-01, -4.77824353e-01, -3.16115460e-01,
                 -2.09695845e-01, -1.36491736e-01, -8.76352653e-02, -5.27551250e-02,
                 -2.89282265e-02, -1.49439602e-02, -6.89438333e-03, -2.26559904e-03,
                  7.73076304e-05]
    
    print(coeffs)
    print("")
    
    for i in range(10):
        diff = (coeffs[i] - benchmark[i]) / benchmark[i]
        print("X=%3d, Y0=%10.3e, Y=%10.3e, dY/Y0=%5.2f%%" %(i+1, benchmark[i], coeffs[i], diff*100))
        assert abs(diff)<0.03
    
    return



def test_96(datafile):
    
    coeffs = cgfm.main(
        top     = datafile("96_lj_liquid.top"),
        traj    = datafile("96_lj_liquid.lammpstrj,frames=20"),
        cut     = 2.5,
        pair    = ['model=BSpline,type=1:1,min=0.75,max=2.5,resolution=0.1'],
        verbose = 0,
        save    = 'return'
    )
    
    benchmark = [69.67509704, 26.45445393, 23.8404359,  -2.50561329, 10.82998438, -8.67650254,
                5.59370661, -7.97466653,  3.45118103,  4.24077037, -5.25848998,  2.07785824,
                -0.46269459, -0.07322601,  1.16535448, -4.09128968,  4.48972393, -6.28855049,
                6.59105355, -7.77713362,  5.19013491, -3.55942125, -0.68025561]

    
    print(coeffs)
    print("")
    
    for i in range(20):
        diff = (coeffs[i] - benchmark[i]) / benchmark[i]
        print("X=%3d, Y0=%10.3e, Y=%10.3e, dY/Y0=%5.2f%%" %(i+1, benchmark[i], coeffs[i], diff*100))
        assert abs(diff)<0.03
        
    return



from mscg import *
import math

def test_2s(datafile):
    
    benchmark1 = [0.0, 13.092561289231206, 7.974446572637421, 4.83134613513014, 2.88863408312499, 1.6832192260481333, 0.9352840565021818, 0.4730389247630956, 0.18987136804908955, 0.02008918175292522, -0.07919978010640938, -0.13276665396657483, -0.15875685987942365, -0.1680018976840637, -0.16660117203256086, -0.15916777856085695, -0.14898707573466746, -0.13650278375821, -0.12499573591350449, -0.11300564151905182, -0.1016463770214618, -0.09127811209842461, -0.08152115684190453, -0.0731733658594943, -0.06447697354725207, -0.058155815440712785, -0.05181801582747503, -0.046429540321674914, -0.04141889985775907, -0.0368655352594223, -0.03311366342849628, -0.029443407649244264, -0.026617925518993467, -0.023669126507420923, -0.02139832208965821, -0.01890167228998975, -0.017159811115365922, -0.01542864576780855, -0.014012804863296872, -0.012085711868813388, -0.010965299841079648, -0.009741976839591184, -0.00896563041375734, -0.007917736975325582, -0.007156361953378311, -0.006663016153834051, -0.0060344879462555, -0.005359635491060539, -0.004730867190405668, -0.00420246866405991, -0.0037710715291358094, -0.0033049977833910626, -0.003028518200205666, -0.0025737934336360797, -0.002405848925011273]
    
    benchmark2 = [0.0, 17.59911388340374, 10.475713169076933, 6.224169467488245, 3.664386126773606, 2.114339071914979, 1.174045440053559, 0.6042002127178547, 0.2616740495183424, 0.05929639071392295, -0.056689710990701615, -0.12010883093278327, -0.1500119727963396, -0.16121601612783543, -0.16019181571080562, -0.15319757333064957, -0.14262817144169704, -0.13058619444264816, -0.1184768273966986, -0.10635807928039745, -0.09508986915162927, -0.08481249654534054, -0.07552495903915989, -0.06697220453337081, -0.05931858138269244, -0.05300431781829122, -0.04654971120398568, -0.04192094472347627, -0.03721360220629539, -0.0332923545986383, -0.029195381374318347, -0.026058793578072656, -0.023289398414564913, -0.02128027493583675, -0.01868799827582669, -0.016753808186734557, -0.015182529166020264, -0.013282653167926005, -0.01209891976721791, -0.010718291137543856, -0.009545717937793107, -0.008697417155296358, -0.007763671962926827, -0.006925650359607635, -0.0061419443704105086, -0.005560633325466706, -0.005023763431683273, -0.0044920847452207535, -0.004053591365236358, -0.003509119272398535, -0.0030948324157076476, -0.0028155806828860726, -0.0024782031119147726, -0.002338105275784859, -0.001867716670314946, -0.0017480832510501274, -0.0014634316017099998]
    
    benchmark3 = [25.311878540645914, 14.659281957445097, 8.514486898753333, 4.924459276000165, 2.808856680856449, 1.5559754539127322, 0.8137670360777456, 0.37609688691093024, 0.12141297228020675, -0.02294952148201162, -0.10085596920451396, -0.13904373147325297, -0.15362916459099796, -0.1546289526179818, -0.14812814091365029, -0.13774504303590895, -0.12571352771072308, -0.11335905009310004, -0.10134286849591737, -0.09017778455340932, -0.0799515450398168, -0.07067612442834127, -0.062445646637014574, -0.055190764111901096, -0.048684323698326364, -0.0430337001782245, -0.0380376231066836, -0.033691060991799276, -0.02982229332489399, -0.02645176500429835, -0.02348107539773241, -0.020879542665799458, -0.0185819578876117, -0.016542946446186663, -0.014763136913804816, -0.013160185037954526, -0.011753308188774923, -0.010521324499702393, -0.009361985186284245, -0.00841789086573384, -0.007513831175558528, -0.006736927483153412, -0.006023574414347646, -0.0053922044071392705, -0.00480506438897563, -0.004295449292118799, -0.0038179252533482293, -0.0034130197624131896, -0.003043535510890798, -0.002703086291920601, -0.0024139182624654414, -0.0021574197953954863, -0.0018367741088596524, -0.0016431149717000125, -0.0014445039312478826, -0.0012850365751170872, -0.0011224892990170771, -0.000995952393303214, -0.0008497770337999819]
    
    
    
    coeffs = cgfm.main(
        top     = datafile("binary_lj_fluid.top"),
        traj    = datafile("binary_lj_fluid.lammpstrj,frames=1000"),
        cut     = 8.5,
        pair    = ['model=BSpline,type=1:1,min=2.9,max=8.5,resolution=0.1', 
                   'model=BSpline,type=1:2,min=2.7,max=8.5,resolution=0.1', 
                   'model=BSpline,type=2:2,min=2.6,max=8.5,resolution=0.1'],
        verbose = 0,
        save    = 'return'
    )
    
    order, dx, xmin, xmax = 6, 0.1, 2.9, 8.5
    
    sp = BSpline(order, dx, xmin, xmax)
    n = math.floor((xmax - xmin)/dx)
    F = sp.interpolate(xmin, dx, n, coeffs[:61])
    print("Force: " + ", ".join([str(_) for _ in F]))
    
    print("\nTable 1_1")
    
    for i in range(5, 20):
        diff = (F[i] - benchmark1[i]) / benchmark1[i]
        print("X=%3d, Y0=%10.3e, Y=%10.3e, dY/Y0=%5.2f%%" %(i+1, benchmark1[i], F[i], diff*100))
        assert abs(diff)<0.03
    
    xmin = 2.7
    sp = BSpline(order, dx, xmin, xmax)
    n = math.floor((xmax - xmin)/dx)
    F = sp.interpolate(xmin, dx, n, coeffs[61:124])
    print("Force: " + ", ".join([str(_) for _ in F]))
    
    print("\nTable 1_2")
    
    for i in range(5, 20):
        diff = (F[i] - benchmark2[i]) / benchmark2[i]
        print("X=%3d, Y0=%10.3e, Y=%10.3e, dY/Y0=%5.2f%%" %(i+1, benchmark2[i], F[i], diff*100))
        assert abs(diff)<0.03
    
    
    xmin = 2.6
    sp = BSpline(order, dx, xmin, xmax)
    n = math.floor((xmax - xmin)/dx)
    F = sp.interpolate(xmin, dx, n, coeffs[124:])
    print("Force: " + ", ".join([str(_) for _ in F]))
    
    print("\nTable 2_2")
    
    for i in range(5, 20):
        diff = (F[i] - benchmark3[i]) / benchmark3[i]
        print("X=%3d, Y0=%10.3e, Y=%10.3e, dY/Y0=%5.2f%%" %(i+1, benchmark3[i], F[i], diff*100))
        assert abs(diff)<0.03
