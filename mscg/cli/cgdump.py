'''Dump force/potential tables from force-matching results

Description
-----------

Th ``cgdump`` command is used to dump the force tables for different MD software packages from the result generated from the ``cgfm`` command.


Usage
-----

Syntax of running ``cgdump`` command ::

    usage: cgdump [-h] [-v L] --file file [--dump] [--plot]

    General arguments:
      -h, --help         show this help message and exit
      -v L, --verbose L  screen verbose level (default: 0)

    Required arguments:
      --file file        matrix file (default: None)

    Optional arguments:
      --dump             dump a LAMMPS table file, in format of
                         [table_name,xmin,xmax,dx] (default: None)
      --plot             plot table, in format of [table_name,xmin,xmax,dx]
                         (default: None)

'''

from mscg import *
import pickle, math

def main(*args, **kwargs):
    
    # parse argument
    
    parser = CLIParser(description='Dump or plot tables from force-matching results.', formatter_class=argparse.ArgumentDefaultsHelpFormatter, fromfile_prefix_chars='@', add_help=False)
    
    group = parser.add_argument_group('General arguments')
    group.add_argument("-h", "--help", action="help", help="show this help message and exit")
    group.add_argument("-v", "--verbose", metavar='L', type=int, default=0, help="screen verbose level")
    
    group = parser.add_argument_group('Required arguments')
    group.add_argument("--file",  metavar='file', type=str, help="matrix file", required=True)
    
    group = parser.add_argument_group('Optional arguments')
    group.add_argument("--dump", metavar='', type=str, help="dump a LAMMPS table file, in format of [model-name,xmin,xmax,dx]", action='append')
    group.add_argument("--plot", metavar='', type=str, help="plot table, in format of [model-name,xmin,xmax,dx]", action='append')
    group.add_argument("--plot-force", metavar='', default=True, type=bool, help="plot force tables")
    
    parser.add_argument('--no-plot-frc', default=False, action='store_true')
    parser.add_argument('--no-plot-pot', default=False, action='store_true')
    
    if len(args)>0 or len(kwargs)>0:
        args = parser.parse_inline_args(*args, **kwargs)
    else:
        args = parser.parse_args()

    # load matrix file
    
    matrix = pickle.load(open(args.file, 'rb'))
    
    screen.info('Matrix file loaded: ' + matrix['file'])
    screen.info('Generated by: %s (%s)' % (matrix['user'], matrix['time']))
    screen.info('Generated on: %s (os: %s)' % (matrix['host'], matrix['os']))
    screen.info('Working path: %s' % (matrix['path']))
    screen.info('The file contains %d models:' % (len(matrix['models'])))
    
    model_kwargs = {}
    
    for name, model in matrix['models'].items():
        info = ' * %-16s:' % (name)
        class_kwargs = {}
        
        for k in model:
            if k not in ['module_name', 'class_name', 'style', 'type', 'params', 'nparam']:
                info += ' %s=%s' % (k, str(model[k]))
                class_kwargs[k] = model[k]
        
        model_kwargs[name] = class_kwargs
        screen.info(info)
    
    # dump LAMMPS table file
    
    def gen_table(table_line):
        
        w = table_line.split(',')
        mname = w[0]
        
        if mname not in matrix['models']:
            screen.error("model [%s] doesn't exist." % (tbl_name))
            return None
               
        model = matrix['models'][mname]
        xmin = float(w[1]) if len(w)>1 else model['min']
        xmax = float(w[2]) if len(w)>2 else model['max']
        dx   = float(w[3]) if len(w)>3 else model['resolution']
        pad  = w[4] if len(w)>4 else ""
        
        screen.info('Produce table for [%s] ...' % (mname))
        
        model_module = importlib.import_module(model['module_name'])
        model_class = getattr(model_module, model['class_name'])
        
        m = model_class(**model_kwargs[mname])
        m.params = model['params']
        
        setattr(m, 'name', mname)
        tbl = Table(m)
        tbl.compute(xmin, xmax, dx)
        
        if not mname.startswith('Pair_'):
            tbl.u = tbl.u - tbl.u.min()
        
        if "L" in pad: tbl.padding_low(m.min)
        if "H" in pad: tbl.padding_high(m.max)
        
        return tbl
    
    if args.dump is not None:
        for dump in args.dump:
            tbl = gen_table(dump)
            tbl.dump_lammps()
    
    
    if args.plot is not None:
        import matplotlib.pyplot as plt
        
        for plot in args.plot:
            tbl = gen_table(plot)
            name = plot.split(',')[0]
            
            if not args.no_plot_frc:
                plt.plot(tbl.x, tbl.f, label='Force: ' + name)
                
            if not args.no_plot_pot:
                plt.plot(tbl.x, tbl.u, '.', label='Potential: ' + name)
        
        plt.legend()
        plt.show()
    
    return



if __name__ == '__main__':
    main()
