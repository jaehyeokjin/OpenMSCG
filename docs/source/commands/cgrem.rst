cgrem
=====

.. automodule:: mscg.cli.cgrem

To run REM, there are **three** parts of input need to be prepared:

1. **Reference Model**: A Python Pickle file, which is specified by ``--ref``, storing the derivaties computed by processing the reference trajectory, i.e., ones from all-atom simulations. This file should be generated by suing the ``cgderiv`` command before launching this script.

2. **Input for the command "cgderiv"**: A text file with runtime options to call the ``cgderiv`` command by the REM engine in the format mentioned `here <../cli.html#take-options-from-file>`__. This script file is used to be parsed by the ``cgderiv`` command to process trajectories generated by the tiral model in each iteration. This file is specified by ``--cgderiv-arg``.

3. **Shell script for MD**: A Shell script calling the MD simulations, specified by ``--md``, and will be used by the REM engine in each iteration. The engine will use a simple `subprocess <https://docs.python.org/3/library/subprocess.html#module-subprocess>`__ to launch the MD simulations, so users need to make sure this script is executable and the MD simulations can be conducted normally by this script.

**Table Generation**: In each iteration, the REM engine will generate input files with tabulated potential/force, which will then be loaded by the MD simulations. The generation of such tables are controlled by the input file specified by ``--model``. In this file, each row defines the tables for a targeted model, in the format of::

    <model-name> <min> <max> <resolution> [initial parameters ...]

The first segment is the name of the model, matching a model defined in the ``cgderive`` input. The next three segments controls the generation of the tables with the minimum, maximum, and the intervals of the table. The rest segments are the values used to generate the initial tables during the iterations.

**Optimizer**: By default, REM uses a *Chi*-based scheme for the optimization, which is described in the equation 12 and 14 in this `paper <https://doi.org/10.1039/B903299C>`__. An example of defining the parameters for the optimizer is following::
    
    --optimizer builtin,chi=0.5,t=298.15

where the key `builtin` means using the default optimizer, and keys `chi` and `t` are setting the step mixing ratio and temperatures to control the step size. The REM code also allows customized optimizer developed by users in Python. A detailed discusson is in this `section <#customized-optimizer>`__.

Notes
-----

For the first iteration of REM, the input model & tables will be generated using the parameters defined in the file specified by ``--model``. After every iteration, there will be a `restart` file to be dumped storing the full history of the iterations. When REM is launched, and the `restart` file exists, the code will pick up the model from the last round of iteration and resume it.

Customized Optimizer
--------------------

*To be added*

Examples
--------

*To be added*

